#!/usr/bin/env perl

my $VERSION = '0.01';

use strict;
use warnings FATAL => 'all';

use NDTools::INC;

use Getopt::Long qw(:config bundling);
use Log::Log4Cli;
use Pod::Usage;
use Struct::Path qw(spath);
use Struct::Path::PerlStyle qw(ps_parse);

use NDTools::Slurp qw(st_dump st_load);
use NDTools::Struct qw(st_copy st_merge);

# defaults
my $OPTS = {
    'path' => '', # empty means whole doc
    'verbose' => 0,
};

my @files;

GetOptions (
    'help|h' => sub {
        pod2usage(-exitval => 1, -output => \*STDERR,
        -sections => 'SYNOPSIS|OPTIONS|EXAMPLES', -verbose => 99)
    },
    'path=s' => \$OPTS->{'path'},
    'verbose|v:+' => \$OPTS->{'verbose'},
    'version|ver' => sub { print "$VERSION\n"; exit 0; },
) || pod2usage(-exitval => 1, -output  => \*STDERR);

$Log::Log4Cli::LEVEL = $OPTS->{'verbose'};

while (my $f = shift @ARGV) { push @files, { src => $f }};

die_fatal "No one file specified", 1 unless (@files);

for my $file (@files) {
    log_debug { "Processing file '$file->{src}'" };
    my $data = st_load($file->{src}, undef);
    my $path = ps_parse($OPTS->{path});
    my ($out) = spath($data, $path, deref => 1);
    st_dump(\*STDOUT, $out, undef);
}

die_info "All done", 0;

__END__

=head1 NAME

ndquery - Get desired parts from nested data structure

=head1 SYNOPSIS

    ndquery [OPTIONS]
    ndquery [OPTIONS] <arguments>

=head1 DESCRIPTION

Get specified by path parts from nested data structure

=head1 OPTIONS

=over 4

=item B<--help>

Print a help message and exit.

=item B<--path> <string>

Specify path in structure to deal with.

=item B<--verbose> [int] B<-v> [int]

Increase verbosity, max level - 4.

=item B<--version> B<--ver>

Print version and exit.

=back

=head1 EXAMPLES

Convert to pretty-printed canonical JSON:

    ndquery struct.json

Get specified path from document:

    ndquery --path '{some}{path}[2]' struct.json

