#!/usr/bin/env perl

my $VERSION = '0.09';

use strict;
use warnings FATAL => 'all';

use NDTools::INC;

use Getopt::Long qw(:config bundling);
use Log::Log4Cli;
use Pod::Usage;
use Struct::Path qw(slist spath spath_delta);
use Struct::Path::PerlStyle qw(ps_parse ps_serialize);
use Term::ANSIColor qw(colored);

use NDTools::Slurp qw(s_dump s_load);

# defaults
my $OPTS = {
    'color-common' => 'bold black',
    'path' => '', # empty means whole doc
};

GetOptions (
    'colors!' => \$OPTS->{colors},
    'depth|d=i' => \$OPTS->{depth},
    'help|h' => sub {
        pod2usage(-exitval => 1, -output => \*STDERR,
        -sections => 'SYNOPSIS|OPTIONS|EXAMPLES', -verbose => 99)
    },
    'insert=s' => \$OPTS->{insert},
    'list|l' => \$OPTS->{list},
    'path|p=s' => \$OPTS->{path},
    'out-fmt=s' => \$OPTS->{'out-fmt'},
    'verbose|v:+' => \$Log::Log4Cli::LEVEL,
    'version|V' => sub { print "$VERSION\n"; exit 0; },
) || pod2usage(-exitval => 1, -output  => \*STDERR);

$OPTS->{colors} = -t STDOUT ? 1 : 0 unless (defined $OPTS->{colors});

my $path = eval { ps_parse($OPTS->{path}) };
die_fatal "Failed to parse path ($@)", 4 if ($@);

for my $file (@ARGV ? @ARGV : \*STDIN) {
    log_debug { "Processing " . (ref $file ? "STDIN" : "file '$file'") };
    my $data = s_load($file, undef);

    my @out; # orig structure may be splitted to many
    if ($OPTS->{insert}) {
        my $val = s_load($OPTS->{insert}, undef);
        if (@{$path}) {
            map { ${$_} = $val } spath($data, $path, expand => 1);
            push @out, $data;
        } else {
            push @out, $val;
        }
    } else {
        @out = spath($data, $path, deref => 1);
    }

    if ($OPTS->{list}) {
        for my $data (@out) {
            my $prev;
            for my $i (slist($data, depth => $OPTS->{depth})) {
                my @delta = spath_delta($prev, $i->[0]);
                my $cmn = @{$i->[0]} - @delta;
                $cmn = ($cmn and @{$i->[0]} != @delta) ? [ @{$i->[0]}[0 .. $cmn - 1] ] : [];
                $cmn = $OPTS->{colors} ?
                    colored(ps_serialize($cmn), $OPTS->{'color-common'}) : ps_serialize($cmn);
                print $cmn . ps_serialize(\@delta) . "\n";
                $prev = $i->[0];
            }
        }
    } else {
        s_dump(\*STDOUT, $OPTS->{'out-fmt'}, undef, @out);
    }
}

die_info "All done", 0;

__END__

=head1 NAME

ndquery - get desired parts from nested data structure

=head1 SYNOPSIS

    ndquery [OPTIONS]
    ndquery [OPTIONS] <arguments>

=head1 DESCRIPTION

Get specified by path parts from nested data structure

=head1 OPTIONS

=over 4

=item B<--[no]colors>

On/Off colors in --list mode.

=item B<--depth|-d> E<lt>intE<gt>

Combined with B<--list> allows to define how much levels must be listed.

=item B<--help|-h>

Print a help message and exit.

=item B<--insert> E<lt>fileE<gt>

Load data from file and insert to structure using path as a pointer.

=item B<--list|-l>

List structure's paths.

=item B<--out-fmt> E<lt>JSON|YAMLE<gt>

Output format selector. JSON used by default.

=item B<--path|-p> E<lt>stringE<gt>

Path in the structure to deal with.

=item B<--verbose|-v> [int]

Increase verbosity, max level - 4.

=item B<--version|-V>

Print version and exit.

=back

=head1 EXAMPLES

Show as pretty printed canonical JSON:

    ndquery struct.json

Get specified path from document:

    ndquery --path '{some}{path}[2]' struct.json

List subpaths:

    ndquery --list --path '{some}{path}[2]' struct.json

=head1 EXIT STATUS

0   No errors occured.
1   Generic error code.
2   I/O Error.
4   Path related errors.

=head1 REPORTING BUGS

Report bugs to L<https://github.com/mr-mixas/NDTools/issues>

=head1 SEE ALSO

L<jq(1)>, L<nddiff(1)>, L<ndproc(1)>

=head1 LICENSE AND COPYRIGHT

Copyright 2016 Michael Samoglyadov C<< <mixas at cpan.org> >>.

This program is free software; you can redistribute it and/or modify it
under the terms of GNU General Public License 3 or later versions.
