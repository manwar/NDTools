#!/usr/bin/env perl

my $VERSION = '0.04';

use strict;
use warnings FATAL => 'all';

use NDTools::INC;

use Getopt::Long qw(:config bundling);
use Log::Log4Cli;
use Pod::Usage;
use Struct::Path qw(slist spath spath_delta);
use Struct::Path::PerlStyle qw(ps_parse ps_serialize);
use Term::ANSIColor qw(colored);

use NDTools::Slurp qw(st_dump st_load);
use NDTools::Struct qw(st_copy st_merge);

# defaults
my $OPTS = {
    'color-common' => 'bold black',
    'path' => '', # empty means whole doc
    'verbose' => 0,
};

my @files;

GetOptions (
    'depth|d=i' => \$OPTS->{depth},
    'help|h' => sub {
        pod2usage(-exitval => 1, -output => \*STDERR,
        -sections => 'SYNOPSIS|OPTIONS|EXAMPLES', -verbose => 99)
    },
    'list|l' => \$OPTS->{list},
    'path|p=s' => \$OPTS->{path},
    'verbose|v:+' => \$OPTS->{verbose},
    'version|ver' => sub { print "$VERSION\n"; exit 0; },
) || pod2usage(-exitval => 1, -output  => \*STDERR);

$Log::Log4Cli::LEVEL = $OPTS->{verbose};
$OPTS->{colors} = -t STDOUT ? 1 : 0 unless (defined $OPTS->{colors});

while (my $f = shift @ARGV) { push @files, { src => $f }};

die_fatal "No one file specified", 1 unless (@files);

my $path = eval_fatal { ps_parse($OPTS->{path}) } 2, "Failed to parse path";

for my $file (@files) {
    log_debug { "Processing file '$file->{src}'" };
    my $data = st_load($file->{src}, undef);
    my ($out) = spath($data, $path, deref => 1);
    if ($OPTS->{list}) {
        my $prev;
        for my $i (slist($out, depth => $OPTS->{depth})) {
            my @delta = spath_delta($prev, $i->[0]);
            my $cmn = @{$i->[0]} - @delta;
            $cmn = ($cmn and @{$i->[0]} != @delta) ? [ @{$i->[0]}[0 .. $cmn - 1] ] : [];
            $cmn = $OPTS->{colors} ? colored(ps_serialize($cmn), $OPTS->{'color-common'}) : ps_serialize($cmn);
            print $cmn . ps_serialize(\@delta) . "\n";
            $prev = $i->[0];
        }
    } else {
        st_dump(\*STDOUT, $out, undef, allow_nonref => 1);
    }
}

die_info "All done", 0;

__END__

=head1 NAME

ndquery - Get desired parts from nested data structure

=head1 SYNOPSIS

    ndquery [OPTIONS]
    ndquery [OPTIONS] <arguments>

=head1 DESCRIPTION

Get specified by path parts from nested data structure

=head1 OPTIONS

=over 4

=item B<--depth|-d> E<lt>intE<gt>

Combined with B<--list> allows to define how much levels must be listed

=item B<--help|-h>

Print a help message and exit.

=item B<--list|-l>

List structure's paths

=item B<--path|-p> E<lt>stringE<gt>

Path in the structure to deal with.

=item B<--verbose|-v> [int]

Increase verbosity, max level - 4.

=item B<--version|--ver>

Print version and exit.

=back

=head1 EXAMPLES

Show as pretty printed canonical JSON:

    ndquery struct.json

Get specified path from document:

    ndquery --path '{some}{path}[2]' struct.json

List subpaths:

    ndquery --list --path '{some}{path}[2]' struct.json
