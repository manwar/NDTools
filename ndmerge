#!/usr/bin/env perl

my $ABOUT = "Merge nested data";
my $VERSION = '0.01';

use strict;
use warnings FATAL => 'all';

use File::Basename qw(basename);
use File::Slurp qw(read_file write_file);
use Getopt::Long qw(:config bundling);
use Hash::Merge qw(merge);
use JSON qw(from_json to_json);
use Log::Log4Cli;
use NDTools::HMBehs qw(HM_OVERRIDE);
use Struct::Diff qw(diff dsplit);

# defaults
my $OPTS = {
    'verbose' => 0,
};

my $e_code = 0;
my $prog_name = basename($0);

sub usage() {
    print STDERR <<USAGE_TEXT;
$prog_name -- $ABOUT

Usage:
    $prog_name [OPTIONS] <arguments>

Options:
    --help
        print this message
    --verbose
        increase verbosity, max level: 4
    --version
        as is

Examples:
    Show this message
        $prog_name --help

USAGE_TEXT
}

if (not GetOptions (
    'help|h' => sub { usage; exit 1; },
    'verbose|v+' => \$OPTS->{'verbose'},
    'version' => sub { print "$VERSION"; exit 0; },
)) { usage(); exit 1; }

$Log::Log4Cli::L = $OPTS->{'verbose'};

my @diffset;
my $result;

Hash::Merge::specify_behavior(HM_OVERRIDE);

for my $file (@ARGV) {
    log_debug { "Loading file '$file'" };
    my $loaded = from_json(read_file($file), {relaxed => 1});
    log_trace { "Merge it to previous" };
    my $merged = merge($result, $loaded);
    my $diff = dsplit(diff($result, $merged, noO => 1, noU => 1));
    $diff->{src} = $file;
    push @diffset, $diff;
    $result = $merged;
}

print to_json(\@diffset, {allow_nonref => 1, canonical => 1, pretty => 1});
print to_json($result, {allow_nonref => 1, canonical => 1, pretty => 1});

log_info { "All done, exit '$e_code'" };
exit $e_code;
